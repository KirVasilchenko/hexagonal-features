buildscript {
	ext {
		javaVersion = 17
		utf8 = 'UTF-8'

		springBootVersion = '3.0.5'
		springDependencyManagementVersion = '1.1.0'
		springDocVersion = '1.6.6'
		apacheCommonsLangVersion = '3.12.0'
		junitVersion = '5.9.1'
		mapstructVersion = '1.5.4.Final'
		jdbcVersion = '6.0.6'
		lombokVersion = '1.18.26'
		lombokMapstructBindingVersion = '0.2.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}" apply false
}

subprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

def configureJavaModule(Project project) {
	configure(project, configureJavaModuleClosure)
}

def configureJavaModuleWithSpring(Project project) {
	configure(project, configureJavaModuleWithSpringClosure)
}

def addSpringWeb(Project project) {
	configure(project, addSpringWebClosure)
}

def addSpringDocWeb(Project project) {
	configure(project, addSpringDocWebClosure)
}

def addPostgreSql(Project project) {
	configure(project, addPostgreSqlClosure)
}

def addLiquibase(Project project) {
	configure(project, addLiquibaseClosure)
}

def addJdbc(Project project) {
	configure(project, addJdbcClosure)
}

def addSpringData(Project project) {
	configure(project, addSpringDataClosure)
}

ext.configureJavaModuleClosure = {
	apply plugin: 'java'

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion

	compileJava {
		options.encoding = utf8
	}
	compileTestJava {
		options.encoding = utf8
	}

	dependencies {
		implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"

		implementation "org.mapstruct:mapstruct:${mapstructVersion}"
		annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

		implementation "org.projectlombok:lombok:${lombokVersion}"
		annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

		annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

		testImplementation platform("org.junit:junit-bom:${junitVersion}")
		testImplementation "org.junit.jupiter:junit-jupiter"
	}

	clean.doFirst {
		delete 'out'
	}

	test {
		useJUnitPlatform()
	}

	jar.archiveBaseName = project.group + "." + project.name
}

ext.configureJavaModuleWithSpringClosure = {
	configureJavaModule(project)

	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}
}

ext.addLiquibaseClosure = {
	dependencies {
		implementation('org.liquibase:liquibase-core') {
			exclude group: 'ch.qos.logback', module: 'logback-classic'
		}
		implementation 'com.zaxxer:HikariCP'
	}
}

ext.addJdbcClosure = {
	dependencies {
		implementation "org.springframework:spring-jdbc:${jdbcVersion}"
	}
}

ext.addSpringWebClosure = {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
	}
}

ext.addSpringDocWebClosure = {
	dependencies {
		implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
	}
}

ext.addSpringDataClosure = {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	}
}


group = 'com.github.kirvasilchenko'
version = '0.0.1-SNAPSHOT'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
